init_worker_by_lua_block {
    local tracer_provider_new = require("opentelemetry.trace.tracer_provider").new
    local batch_span_processor_new = require("opentelemetry.trace.batch_span_processor").new
    local otlp_exporter_new = require("opentelemetry.trace.exporter.otlp").new
    local resource_new = require("opentelemetry.resource").new
    local exporter_client_new = require("opentelemetry.trace.exporter.http_client").new
    local attr = require("opentelemetry.attribute")

    -- create exporter
    local use_gzip = true
    local headers = {}
    headers["Content-Encoding"] = "gzip"
    local exporter_timeout = 10000
    local exporter = otlp_exporter_new(exporter_client_new("otel-collector:4317", 3, headers), exporter_timeout, use_gzip)
    -- create span processor
    local batch_span_processor = batch_span_processor_new(exporter)
    -- create tracer provider
    local tp = tracer_provider_new(batch_span_processor,
            {resource = resource_new(attr.string("service.name", "openresty"), attr.int("attr_int", 100))})
    -- create tracer
    local global = require("opentelemetry.global")
    -- tp is a tracer provider instance
    global.set_tracer_provider(tp)
}

server {
    listen       80;
    server_name  localhost;

    resolver 127.0.0.11;

    # https://github.com/w3c/trace-context/tree/main/test#implement-test-service
    location /test/e2e/trace-context {
        content_by_lua_block {
            local global = require("opentelemetry.global")
            local tracer = global.tracer("opentelemetry-lua")
            local context = require("opentelemetry.context").new()
            local trace_context_propagator = require("opentelemetry.trace.propagation.text_map.trace_context_propagator").new()
            local composite_propagator = require("opentelemetry.trace.propagation.text_map.composite_propagator").new({ trace_context_propagator })
            local http = require("resty.http")
            local cjson = require("cjson.safe")

            ngx.req.read_body()
            local test_cases = cjson.decode(ngx.req.get_body_data())

            for _, case in ipairs(test_cases) do
                -- Headers_carrier set_header function will hold reference to this table.
                -- We reset the propagated headers for each test case.
                local propagated_headers = {
                    ["Content-Type"] = "application/json",
                }

                -- req.ngx cannot be used as we loop over the test cases, so we
                -- Use a headers_carrier variable to handle propagation.
                local headers_carrier = {
                    headers = propagated_headers,
                    set_header = function(name, val)
                        propagated_headers[name] = val
                    end
                }
                local httpc = http.new()
                httpc:set_timeout(1000)

                -- Start span
                local context, span = tracer:start(composite_propagator:extract(context, ngx.req), "e2e")

                -- Inject context into headers_carrier
                composite_propagator:inject(context, headers_carrier)

                local res, err = httpc:request_uri(case.url, {
                    method = "POST",
                    headers = headers_carrier.headers,
                    body = cjson.encode(case.arguments),
                })

                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                    httpc:close()
                    return 500
                end
                if res.status ~= 200  then
                    ngx.log(ngx.ERR, "request failed: ", res.body)
                    httpc:close()
                    return 500
                end
                httpc:close()
                span:finish()
            end
            return 200
        }
    }

    location /test/e2e {
        access_by_lua_block {

            local span_kind = require("opentelemetry.trace.span_kind")

            local http_conv = require("opentelemetry.semantic_conventions.trace.http")
            local attr = require("opentelemetry.attribute")
            local context = require("opentelemetry.context").new()
            local trace_context_propagator = require("opentelemetry.trace.propagation.text_map.trace_context_propagator").new()
            local composite_propagator = require("opentelemetry.trace.propagation.text_map.composite_propagator").new({ trace_context_propagator })
            local global = require("opentelemetry.global")
            local tracer = global.tracer("opentelemetry-lua")

            -- extract trace context from the headers of downstream HTTP request
            context = composite_propagator:extract(context, ngx.req)

            local attributes = http_conv.request_header(ngx.req.get_headers())
            table.insert(attributes, attr.string_array("attr_strings", {"opentelemetry", "lua"}))
            table.insert(attributes, attr.int("attr_int", 1024))
            table.insert(attributes, attr.int_array("attr_ints", {1024, 2048}))
            table.insert(attributes, attr.double("attr_double", 10.24))
            table.insert(attributes, attr.double_array("attr_doubles", {10.24, 20.48}))
            table.insert(attributes, attr.bool("attr_bool", true))
            table.insert(attributes, attr.bool_array("attr_bools", {true, false}))
            local context, span = tracer:start(context, "access_by_lua_block", {
                kind = span_kind.internal,
                attributes = attributes,
            })
            context:attach()

            -- inject trace context into the headers of upstream HTTP request
            composite_propagator:inject(context, ngx.req)
        }

        proxy_pass http://test-server:80;

        header_filter_by_lua_block {
            local context = require("opentelemetry.context").new()
            local span_status = require("opentelemetry.trace.span_status")
            local attr = require("opentelemetry.attribute")

            -- get tracer from current context
            local tracer = context.current():span():tracer_provider():tracer("opentelemetry-lua")

            local http_conv = require("opentelemetry.semantic_conventions.trace.http")
            local resp_attrs = http_conv.response_header(ngx.resp.get_headers())
            local context, sub_span = tracer:start(context.current(), "header_filter_by_lua_block")
            sub_span:set_attributes(unpack(resp_attrs))
            sub_span:record_error("this is err")
            sub_span:set_status(span_status.ERROR, "set status err")
            sub_span:add_event("event1", {attributes = {attr.string("attr_string", "attr_value")}})
            sub_span:finish();
        }

        log_by_lua_block {
            local context = require("opentelemetry.context").new()
            -- get span from current context
            context.current():span():finish()
        }
    }
}
